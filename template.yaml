AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless

  Sample SAM Template for serverless

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Runtime: nodejs14.x

Parameters:
  AppEnv:
    Type: String
    Default: dev
    Description: Application environment
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 1
    ConstraintDescription: "1-10 Latin letters"
  UploadLimitInMb:
    Type: Number
    Default: 5
    Description: Maximum upload size in megabytes
    MinValue: 1
    MaxValue: 100

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: dist/
      Handler: app.lambdaHandler
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref RestApiGateway

  FormHanlderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: app.formHandler
      Events:
        GetForm:
          Type: Api
          Properties:
            Path: /user-form
            Method: get

  ProcessFormHanlderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: app.processFormHandler
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadS3Bucket
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref UploadS3Bucket
      Events:
        SubmitForm:
          Type: Api
          Properties:
            Path: /user-form
            Method: post

  ShowUploadFormFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: upload-file.showUploadFormHandler
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref UploadS3Bucket
          UPLOAD_LIMIT_IN_MB: !Ref UploadLimitInMb
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadS3Bucket
      Events:
        ShowUploadForm:
          Type: Api
          Properties:
            Path: /upload-file
            Method: get

  ConfirmUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: upload-file.confirmUploadHandler
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref UploadS3Bucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref UploadS3Bucket
      Events:
        ConfirmUpload:
          Type: Api
          Properties:
            Path: /confirm
            Method: get

  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: ApiWithAuthorizer
      StageName: !Ref AppEnv
      Auth:
        ApiKeyRequired: false
        DefaultAuthorizer: RestApiAuthorizer
        Authorizers:
          RestApiAuthorizer:
            FunctionArn: !GetAtt RestApiLambdaAuthorizer.Arn
            Identity:
              Headers:
                - Authorization

  RestApiLambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: auth.restApiAuthorizationHandler

  UploadS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${RestApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnv}/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  UploadBucket:
    Description: "S3 Bucket for user information"
    Value: !Ref UploadS3Bucket
