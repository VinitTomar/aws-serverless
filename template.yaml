AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless

  Sample SAM Template for serverless

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Runtime: nodejs14.x

Parameters:
  AppEnv:
    Type: String
    Default: dev
    Description: Application environment
    AllowedPattern: ^[A-Za-z]+$
    MaxLength: 10
    MinLength: 1
    ConstraintDescription: "1-10 Latin letters"
  UploadLimitInMb:
    Type: Number
    Default: 5
    Description: Maximum upload size in megabytes
    MinValue: 1
    MaxValue: 100
  ContactEmailAddress:
    Type: String
    Description: Email address for operational notifications
    Default: "libat95252@ukgent.com"
  ThumbnailWidth:
    Type: Number
    Default: 30
    Description: Thumbnail width in pixels
    MinValue: 1
    MaxValue: 300

Conditions:
  ContactEmailSet: !Not [!Equals ["", !Ref ContactEmailAddress]]

Metadata:
  AWS::ServerlessRepo::Application:
    Name: vin-image-thumbnail
    Description: An app for generation thumbnails for images
    Author: Vinit Tomar
    SemanticVersion: 1.0.0
    SpdxLicenceId: MIT
    LicenceUrl: LICENSE.md
    ReadmeUrl: README.md
    Labels: ["layer", "image", "lambda", "imagemagick"]
    HomePageUrl: https://github.com/VinitTomar

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: dist/
      Handler: app.lambdaHandler
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref RestApiGateway

  FormHanlderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: app.formHandler
      Events:
        GetForm:
          Type: Api
          Properties:
            Path: /user-form
            Method: get

  ProcessFormHanlderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: app.processFormHandler
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadS3Bucket
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref UploadS3Bucket
      Events:
        SubmitForm:
          Type: Api
          Properties:
            Path: /user-form
            Method: post

  ShowUploadFormFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: upload-file.showUploadFormHandler
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref UploadS3Bucket
          UPLOAD_LIMIT_IN_MB: !Ref UploadLimitInMb
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadS3Bucket
      Events:
        ShowUploadForm:
          Type: Api
          Properties:
            Path: /upload-file
            Method: get

  GetUploadDownloadPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: permission.getUploadDownloadPolicyHandler
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref UploadS3Bucket
          UPLOAD_LIMIT_IN_MB: !Ref UploadLimitInMb
          THUMBNAILS_S3_BUCKET: !Ref ThumbnailsS3Bucket
          CORS_ORIGIN: !GetAtt WebAssetsS3Bucket.WebsiteURL
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadS3Bucket
        - S3ReadPolicy:
            BucketName: !Ref ThumbnailsS3Bucket
      Events:
        ShowUploadForm:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref AjaxApiGateway

  ConfirmUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: upload-file.confirmUploadHandler
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref ThumbnailsS3Bucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ThumbnailsS3Bucket
      Events:
        ConfirmUpload:
          Type: Api
          Properties:
            Path: /confirm
            Method: get

  ImageConversionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: image-conversion.generateThumbnailHandler
      Timeout: 600
      Events:
        FileUploaded:
          Type: S3
          Properties:
            Bucket: !Ref UploadS3Bucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref ThumbnailsS3Bucket
          THUMB_WIDTH: !Ref ThumbnailWidth
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ThumbnailsS3Bucket
      Layers:
        - !GetAtt ImageMagick.Outputs.LayerVersion
      DeadLetterQueue:
        TargetArn: !Ref NotifyAdmins
        Type: SNS

  AjaxApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: thumbnail
      Name: ajax
      Cors: !Sub "'${WebAssetsS3Bucket.WebsiteURL}'"

  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: ApiWithAuthorizer
      StageName: !Ref AppEnv
      Auth:
        ApiKeyRequired: false
        DefaultAuthorizer: RestApiAuthorizer
        Authorizers:
          RestApiAuthorizer:
            FunctionArn: !GetAtt RestApiLambdaAuthorizer.Arn
            Identity:
              Headers:
                - Authorization

  RestApiLambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: auth.restApiAuthorizationHandler

  WebAssetsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        ErrorDocument: 404.html
        IndexDocument: index.html

  UploadS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - POST
            AllowedOrigins:
              - !GetAtt WebAssetsS3Bucket.WebsiteURL
            MaxAge: 3600

  ThumbnailsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - !GetAtt WebAssetsS3Bucket.WebsiteURL
            MaxAge: 3600

  ConvertFunctionCanReadUploads:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConvertFunctionCanReadUploads
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource:
              - !Sub "${UploadS3Bucket.Arn}/*"
      Roles:
        - !Ref ImageConversionFunctionRole

  ImageMagick:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:145266761615:applications/image-magick-lambda-layer
        SemanticVersion: 1.0.0

  NotifyAdmins:
    Type: AWS::SNS::Topic

  AlarmNotifyOpsSubscription:
    Type: AWS::SNS::Subscription
    Condition: ContactEmailSet
    Properties:
      Endpoint: !Ref ContactEmailAddress
      Protocol: email
      TopicArn: !Ref NotifyAdmins

  DeployToS3:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 1.0.0

  # UPLOAD FRONTEND TO S3 START
  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !GetAtt DeployToS3.Outputs.Arn
      CodeUri: frontend/
      AutoPublishAlias: production
      Runtime: python3.7
      Handler: deployer.resource_handler
      Timeout: 600
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref WebAssetsS3Bucket

  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SiteSource.Arn
      Version: !Ref "SiteSource.Version"
      TargetBucket: !Ref WebAssetsS3Bucket
      Substitutions:
        FilePattern: "*.html"
        Values:
          API_URL: !Sub "https://${AjaxApiGateway}.execute-api.${AWS::Region}.amazonaws.com/thumbnail/"
      Acl: "public-read"
      CacheControlMaxAge: 600

  # UPLOAD FRONTEND TO S3 END

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${RestApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnv}/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  UploadBucket:
    Description: "S3 Bucket for user information"
    Value: !Ref UploadS3Bucket
  WebUrl:
    Description: "Public web URL"
    Value: !GetAtt WebAssetsS3Bucket.WebsiteURL
